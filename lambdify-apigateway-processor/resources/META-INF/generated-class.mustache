package {{packageName}};

import java.util.*;
import java.math.*;

@SuppressWarnings("unchecked")
@javax.annotation.Generated( "Generated by Lambdify" )
public class {{generatedSimpleName}} implements lambdify.apigateway.Router {

	/* The wrapped instance */
	private final {{canonicalName}} instance;

    public lambdify.apigateway.Router.Entry<lambdify.apigateway.Router.Route, lambdify.apigateway.Router.LambdaFunction>[] getRoutes() {
		return arrayOf(
			{{#methodsIterable}}
				{{^first}},{{/first}} {{#data}}
				{{route.method}}.and( {{{route.url}}} ).with{{#voidMethod}}NoContent{{/voidMethod}}( this::{{name}}{{counter}} )
				{{/data}}
			{{/methodsIterable}}
		);
	}

    @SafeVarargs
    private static <T> T[] arrayOf( T...ts ){
        return ts;
    }

{{#methods}}
{{#constructor}}
	/**
	 * Constructor for:
	 * <pre><code>
	 *   new {{canonicalName}}( {{argumentList}} );
	 * </code></pre>
	 */
	public {{generatedSimpleName}}( {{parameterList}} ){
	    this.instance = new {{canonicalName}}( {{argumentList}} );
	}
{{/constructor}}
{{^constructor}}
	{{^voidMethod}}lambdify.apigateway.Response{{/voidMethod}}{{#voidMethod}}void{{/voidMethod}} {{name}}{{counter}}(
			lambdify.apigateway.Request request ){
		{{^voidMethod}}return {{^returnsResponse}}lambdify.apigateway.Response.ok({{/returnsResponse}}{{/voidMethod}}this.instance.{{name}}(
		{{#parameterIterable}}
			{{^first}},{{/first}}{{#data}}
			{{#pathParameter}}
				request.getPathParam( {{{value}}}, {{parent.type}}.class )
			{{/pathParameter}}
			{{#headerParameter}}
				request.getHeaderParam( {{{value}}}, {{parent.type}}.class )
			{{/headerParameter}}
			{{#queryParameter}}
				request.getQueryParam( {{{value}}}, {{parent.type}}.class )
			{{/queryParameter}}
			{{#bodyParameter}}
				request.getBodyAs( {{type}}.class )
			{{/bodyParameter}}
			{{#APIGatewayRequest}}
				{{name}}
			{{/APIGatewayRequest}}
			{{/data}}
		{{/parameterIterable}}
		){{^voidMethod}}{{^returnsResponse}}, "{{contentType}}"){{/returnsResponse}}{{/voidMethod}};
	}
{{/constructor}}

{{/methods}}
}
